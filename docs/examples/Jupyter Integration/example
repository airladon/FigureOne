{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "function toggler(output_area, forceHide = false) {\n",
       "  var cell_element = output_area.element.parents('.cell');\n",
       "  var cell_idx = Jupyter.notebook.get_cell_elements().index(cell_element);\n",
       "  var cell = Jupyter.notebook.get_cell(cell_idx);\n",
       "  var input = cell.input[0];\n",
       "  if (input.style.display === 'none' && forceHide === false) {\n",
       "    cell.input[0].setAttribute(\"style\", \"\");\n",
       "  } else {\n",
       "    cell.input[0].setAttribute(\"style\", \"display:none\");            \n",
       "  }\n",
       "}\n",
       "\n",
       "function addToggleLink(elem, output_area, label = '', hideOnRun = true) {\n",
       "  // Create a <a></a> link element that will show/hide the cell\n",
       "  var a = document.createElement('a');  \n",
       "  var link = document.createTextNode(`Show/Hide: ${label}`); \n",
       "  a.appendChild(link);  \n",
       "  a.href = '#';\n",
       "  a.onclick = toggler.bind(this, output_area, false);\n",
       "  elem[0].appendChild(a)\n",
       "  if (hideOnRun) {\n",
       "    toggler(output_area, true)\n",
       "  }\n",
       "}\n",
       "\n",
       "// Attach `addToggleLink` to `window`\n",
       "window.addToggleLink = addToggleLink;\n",
       "\n",
       "// Call `addToggleLink` to hide this setup code and keep the notebook clean\n",
       "window.addToggleLink(element, this, 'Helper functions');\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "function toggler(output_area, forceHide = false) {\n",
    "  var cell_element = output_area.element.parents('.cell');\n",
    "  var cell_idx = Jupyter.notebook.get_cell_elements().index(cell_element);\n",
    "  var cell = Jupyter.notebook.get_cell(cell_idx);\n",
    "  var input = cell.input[0];\n",
    "  if (input.style.display === 'none' && forceHide === false) {\n",
    "    cell.input[0].setAttribute(\"style\", \"\");\n",
    "  } else {\n",
    "    cell.input[0].setAttribute(\"style\", \"display:none\");            \n",
    "  }\n",
    "}\n",
    "\n",
    "function addToggleLink(elem, output_area, label = '', hideOnRun = true) {\n",
    "  // Create a <a></a> link element that will show/hide the cell\n",
    "  var a = document.createElement('a');  \n",
    "  var link = document.createTextNode(`Show/Hide: ${label}`); \n",
    "  a.appendChild(link);  \n",
    "  a.href = '#';\n",
    "  a.onclick = toggler.bind(this, output_area, false);\n",
    "  elem[0].appendChild(a)\n",
    "  if (hideOnRun) {\n",
    "    toggler(output_area, true)\n",
    "  }\n",
    "}\n",
    "\n",
    "// Attach `addToggleLink` to `window`\n",
    "window.addToggleLink = addToggleLink;\n",
    "\n",
    "// Call `addToggleLink` to hide this setup code and keep the notebook clean\n",
    "window.addToggleLink(element, this, 'Helper functions');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "require.config({ \n",
       "  paths: { \n",
       "    Fig: 'https://cdn.jsdelivr.net/npm/figureone@0.15.9/figureone.min'\n",
       "  },\n",
       "  scriptType: 'text/javascript'\n",
       "});\n",
       "window.addToggleLink(element, this, 'Load FigureOne');\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "require.config({ \n",
    "  paths: { \n",
    "    Fig: 'https://cdn.jsdelivr.net/npm/figureone@0.15.9/figureone.min'\n",
    "  },\n",
    "  scriptType: 'text/javascript'\n",
    "});\n",
    "window.addToggleLink(element, this, 'Load FigureOne');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dynamic Equation\n",
    "\n",
    "Press on the elements of the equation to rearrange its form.\n",
    "\n",
    "<div id=\"dynamic_equation_1\" style=\"width: 400px; height: 200px; background-color: #eee; margin-top: 1em\">\n",
    "    </div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "require(['Fig'], function(Fig) {  \n",
       "    // Create a figure with limits that are proportional to the html div style size \n",
       "    const figure = new Fig.Figure({\n",
       "      scene: new Fig.Rect(-2, -1, 2, 1),\n",
       "      htmlId: 'dynamic_equation_1',\n",
       "    });\n",
       "\n",
       "    figure.add({\n",
       "      name: 'eqn',\n",
       "      make: 'equation',\n",
       "      options: {\n",
       "        position: [-0.4, -0.1],\n",
       "        scale: 2,\n",
       "        color: [0, 0, 0, 1],\n",
       "        elements: {\n",
       "          equals: ' = ',\n",
       "          times: ' \\u00D7 ',\n",
       "          c: { color: [1, 0, 0, 1] },\n",
       "          a: { color: [0, 0.5, 0, 1] },\n",
       "          b: { color: [0, 0, 1, 1] },\n",
       "        },\n",
       "        formDefaults: { alignment: { fixTo: 'equals' } },\n",
       "\n",
       "        // Define each equation form, and how the elements should move\n",
       "        forms: {\n",
       "          'a': {\n",
       "            content: ['a', 'equals', { frac: ['b', 'vinculum', 'c'] }],\n",
       "            translation: {\n",
       "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
       "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
       "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
       "            },\n",
       "          },\n",
       "          'b': {\n",
       "            content: ['b', 'equals', 'c', 'times', 'a'],\n",
       "            translation: {\n",
       "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
       "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
       "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
       "            },\n",
       "          },\n",
       "          'c': {\n",
       "            content: ['c', 'equals', { frac: ['b', 'vinculum', 'a'] }],\n",
       "            translation: {\n",
       "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
       "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
       "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
       "            },\n",
       "          },\n",
       "        },\n",
       "      },\n",
       "    });\n",
       "    figure.initialize();\n",
       "\n",
       "    const eqn = figure.getElement('eqn');\n",
       "    const a = figure.getElement('eqn.a');\n",
       "    const b = figure.getElement('eqn.b');\n",
       "    const c = figure.getElement('eqn.c');\n",
       "    function goto(form) {\n",
       "      eqn.goToForm({\n",
       "        name: form, delay: 0, duration: 1.5, animate: 'move',\n",
       "      });\n",
       "      figure.animateNextFrame();\n",
       "    }\n",
       "    a.onClick = goto.bind(this, 'a');\n",
       "    b.onClick = goto.bind(this, 'b');\n",
       "    c.onClick = goto.bind(this, 'c');\n",
       "    a.setTouchable();\n",
       "    b.setTouchable();\n",
       "    c.setTouchable();\n",
       "    eqn.showForm('a');\n",
       "    figure.animateNextFrame();\n",
       "});\n",
       "// Hide the javascript code\n",
       "window.addToggleLink(element, this, 'Dynamic Equation');\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "require(['Fig'], function(Fig) {  \n",
    "    // Create a figure with limits that are proportional to the html div style size \n",
    "    const figure = new Fig.Figure({\n",
    "      scene: new Fig.Rect(-2, -1, 2, 1),\n",
    "      htmlId: 'dynamic_equation_1',\n",
    "    });\n",
    "\n",
    "    figure.add({\n",
    "      name: 'eqn',\n",
    "      make: 'equation',\n",
    "      options: {\n",
    "        position: [-0.4, -0.1],\n",
    "        scale: 2,\n",
    "        color: [0, 0, 0, 1],\n",
    "        elements: {\n",
    "          equals: ' = ',\n",
    "          times: ' \\u00D7 ',\n",
    "          c: { color: [1, 0, 0, 1] },\n",
    "          a: { color: [0, 0.5, 0, 1] },\n",
    "          b: { color: [0, 0, 1, 1] },\n",
    "        },\n",
    "        formDefautls: { alignment: { fixTo: 'equals' } },\n",
    "\n",
    "        // Define each equation form, and how the elements should move\n",
    "        forms: {\n",
    "          'a': {\n",
    "            content: ['a', 'equals', { frac: ['b', 'vinculum', 'c'] }],\n",
    "            translation: {\n",
    "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
    "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
    "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
    "            },\n",
    "          },\n",
    "          'b': {\n",
    "            content: ['b', 'equals', 'c', 'times', 'a'],\n",
    "            translation: {\n",
    "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
    "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
    "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
    "            },\n",
    "          },\n",
    "          'c': {\n",
    "            content: ['c', 'equals', { frac: ['b', 'vinculum', 'a'] }],\n",
    "            translation: {\n",
    "              a: { style: 'curved', direction: 'down', mag: 0.8 },\n",
    "              b: { style: 'curved', direction: 'up', mag: 0.5 },\n",
    "              c: { style: 'curved', direction: 'down', mag: 0.5 },\n",
    "            },\n",
    "          },\n",
    "        },\n",
    "      },\n",
    "    });\n",
    "    figure.initialize();\n",
    "\n",
    "    const eqn = figure.getElement('eqn');\n",
    "    const a = figure.getElement('eqn.a');\n",
    "    const b = figure.getElement('eqn.b');\n",
    "    const c = figure.getElement('eqn.c');\n",
    "    function goto(form) {\n",
    "      eqn.goToForm({\n",
    "        name: form, delay: 0, duration: 1.5, animate: 'move',\n",
    "      });\n",
    "      figure.animateNextFrame();\n",
    "    }\n",
    "    a.onClick = goto.bind(this, 'a');\n",
    "    b.onClick = goto.bind(this, 'b');\n",
    "    c.onClick = goto.bind(this, 'c');\n",
    "    a.setTouchable();\n",
    "    b.setTouchable();\n",
    "    c.setTouchable();\n",
    "    eqn.showForm('a');\n",
    "    figure.animateNextFrame();\n",
    "});\n",
    "// Hide the javascript code\n",
    "window.addToggleLink(element, this, 'Dynamic Equation');"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
