// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Different ways to make an equation All Text in constructor with all options 1`] = `
DiagramElementPrimitive {
  "afterDrawCallback": null,
  "angleToDraw": -1,
  "anim": Object {
    "builder": [Function],
    "color": [Function],
    "dim": [Function],
    "dissolveIn": [Function],
    "dissolveOut": [Function],
    "opacity": [Function],
    "position": [Function],
    "pulse": [Function],
    "rotation": [Function],
    "scale": [Function],
    "scenario": [Function],
    "scenarioNew": [Function],
    "scenarios": [Function],
    "transform": [Function],
    "trigger": [Function],
    "undim": [Function],
  },
  "animations": AnimationManager {
    "animations": Array [],
    "element": [Circular],
    "options": Object {
      "translation": Object {},
    },
    "state": "idle",
  },
  "beforeDrawCallback": null,
  "cannotTouchHole": false,
  "color": Array [
    0.95,
    0,
    0,
    1,
  ],
  "custom": Object {},
  "defaultColor": Array [
    0.95,
    0,
    0,
    1,
  ],
  "diagramLimits": Rect {
    "bottom": -1,
    "height": 2,
    "left": -1,
    "right": 1,
    "top": 1,
    "width": 2,
  },
  "dimColor": Array [
    0.5,
    0.5,
    0.5,
    1,
  ],
  "drawPriority": 1,
  "drawingObject": TextObject {
    "border": Array [
      Array [
        Point {
          "_type": "point",
          "x": 0,
          "y": 0.09500000000000001,
        },
        Point {
          "_type": "point",
          "x": 0.04000000000000001,
          "y": 0.09500000000000001,
        },
        Point {
          "_type": "point",
          "x": 0.04000000000000001,
          "y": -0.008,
        },
        Point {
          "_type": "point",
          "x": 0,
          "y": -0.008,
        },
      ],
    ],
    "drawContext2D": Array [
      DrawContext2D {
        "canvas": Object {
          "height": 1000,
          "offsetHeight": 500,
          "offsetWidth": 1000,
          "style": Object {
            "height": "500px",
            "width": "1000px",
          },
          "width": 2000,
        },
        "ctx": Object {
          "canvas": Object {
            "height": 500,
            "width": 1000,
          },
          "clearRect": [Function],
          "fillText": [Function],
          "filledText": Object {
            "count": 0,
            "text": "",
            "x": null,
            "y": null,
          },
          "font": "italic 200 100px Times New Roman",
          "measureText": [Function],
          "restore": [Function],
          "save": [Function],
          "scale": [Function],
          "textAlign": "left",
          "textBaseline": "alphabetic",
          "transform": [Function],
          "transformMatrix": Array [
            0,
          ],
        },
        "ratio": 2,
        "resize": [Function],
      },
    ],
    "holeBorder": Array [
      Array [],
    ],
    "lastDraw": Array [],
    "lastDrawTransform": Array [],
    "location": Point {
      "_type": "point",
      "x": 0,
      "y": 0,
    },
    "onLoad": null,
    "scalingFactor": 499.99999999999994,
    "state": "loaded",
    "text": Array [
      DiagramText {
        "font": DiagramFont {
          "color": Array [
            0.95,
            0,
            0,
            1,
          ],
          "family": "Times New Roman",
          "opacity": 1,
          "size": 0.2,
          "style": "italic",
          "weight": "200",
          "xAlign": "left",
          "yAlign": "alphabetic",
        },
        "location": Point {
          "_type": "point",
          "x": 0,
          "y": 0,
        },
        "text": "a",
      },
    ],
    "type": "drawingObject",
  },
  "fnMap": FunctionMap {
    "global": GlobalFunctionMap {
      "map": Object {},
    },
    "map": Object {
      "_elementPulseSettingsTransformMethod": Object {
        "fn": [Function],
      },
      "tools.math.easeinout": Object {
        "fn": [Function],
      },
      "tools.math.linear": Object {
        "fn": [Function],
      },
      "tools.math.sinusoid": Object {
        "fn": [Function],
      },
    },
  },
  "hasTouchableElements": false,
  "interactiveLocation": Point {
    "_type": "point",
    "x": 0,
    "y": 0,
  },
  "internalSetTransformCallback": null,
  "isInteractive": undefined,
  "isMovable": false,
  "isRenderedAsImage": false,
  "isShown": true,
  "isTouchable": false,
  "lastDrawElementTransformPosition": Object {
    "elementCount": 3,
    "parentCount": 6,
  },
  "lastDrawPulseTransform": Transform {
    "_type": "transform",
    "index": 3,
    "mat": Array [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
    ],
    "name": "text",
    "order": Array [
      Scale {
        "_type": "point",
        "name": "text",
        "x": 1,
        "y": 1,
      },
      Rotation {
        "name": "text",
        "r": 0,
      },
      Translation {
        "_type": "point",
        "name": "text",
        "x": 0,
        "y": 0,
      },
    ],
  },
  "lastDrawTransform": Transform {
    "_type": "transform",
    "index": 0,
    "mat": Array [
      0.45,
      0,
      2.873675,
      0,
      0.45,
      2.8807625000000003,
      0,
      0,
      1,
    ],
    "name": "Equation",
    "order": Array [
      Translation {
        "_type": "point",
        "name": "text",
        "x": 1.9415,
        "y": 1.9572500000000002,
      },
      Rotation {
        "name": "text",
        "r": 0,
      },
      Scale {
        "_type": "point",
        "name": "text",
        "x": 0.45,
        "y": 0.45,
      },
      Scale {
        "_type": "point",
        "name": "Equation",
        "x": 1,
        "y": 1,
      },
      Rotation {
        "name": "Equation",
        "r": 0,
      },
      Translation {
        "_type": "point",
        "name": "Equation",
        "x": 1,
        "y": 1,
      },
      Scale {
        "_type": "point",
        "name": "Equation",
        "x": 1,
        "y": 1,
      },
      Rotation {
        "name": "Equation",
        "r": 0,
      },
      Translation {
        "_type": "point",
        "name": "Equation",
        "x": 1,
        "y": 1,
      },
    ],
  },
  "lengthToDraw": -1,
  "move": Object {
    "bounce": true,
    "boundary": null,
    "canBeMovedAfterLosingTouch": false,
    "element": null,
    "freely": Object {
      "callback": null,
      "deceleration": TransformLimit {
        "rotation": 5,
        "scale": 5,
        "translation": 5,
      },
      "zeroVelocityThreshold": TransformLimit {
        "rotation": 0.001,
        "scale": 0.001,
        "translation": 0.001,
      },
    },
    "limitLine": null,
    "maxTransform": Transform {
      "_type": "transform",
      "index": 3,
      "mat": Array [
        562.3790762907031,
        -826.8795405320025,
        1000,
        826.8795405320025,
        562.3790762907031,
        1000,
        0,
        0,
        1,
      ],
      "name": "text",
      "order": Array [
        Scale {
          "_type": "point",
          "name": "text",
          "x": 1000,
          "y": 1000,
        },
        Rotation {
          "name": "text",
          "r": 1000,
        },
        Translation {
          "_type": "point",
          "name": "text",
          "x": 1000,
          "y": 1000,
        },
      ],
    },
    "maxVelocity": TransformLimit {
      "rotation": 5,
      "scale": 5,
      "translation": 5,
    },
    "minTransform": Transform {
      "_type": "transform",
      "index": 3,
      "mat": Array [
        -562.3790762907031,
        -826.8795405320025,
        -1000,
        826.8795405320025,
        -562.3790762907031,
        -1000,
        0,
        0,
        1,
      ],
      "name": "text",
      "order": Array [
        Scale {
          "_type": "point",
          "name": "text",
          "x": -1000,
          "y": -1000,
        },
        Rotation {
          "name": "text",
          "r": -1000,
        },
        Translation {
          "_type": "point",
          "name": "text",
          "x": -1000,
          "y": -1000,
        },
      ],
    },
    "transformClip": null,
    "type": "translation",
  },
  "name": "a",
  "onClick": null,
  "opacity": 1,
  "parent": null,
  "pointsToDraw": -1,
  "pulseDefault": Object {
    "frequency": 0,
    "scale": 2,
    "time": 1,
  },
  "pulseSettings": Object {
    "A": 1,
    "B": 0.5,
    "C": 0,
    "callback": [Function],
    "delta": Point {
      "_type": "point",
      "x": 0,
      "y": 0,
    },
    "frequency": 0.5,
    "num": 1,
    "style": "tools.math.sinusoid",
    "time": 1,
    "transformMethod": "_elementPulseSettingsTransformMethod",
  },
  "recorder": Recorder {
    "animateDiagramNextFrame": [Function],
    "animation": GlobalAnimation {
      "animationId": 1,
      "drawQueue": Array [],
      "nextDrawQueue": Array [
        [Function],
        [Function],
      ],
      "requestNextAnimationFrame": [Function],
    },
    "audio": null,
    "currentTime": 0,
    "cursorMove": [Function],
    "events": Array [],
    "getCurrentSlide": null,
    "getElement": [Function],
    "getState": [Function],
    "goToSlide": null,
    "isAudioPlaying": false,
    "isRecording": false,
    "lastShownEventIndex": -1,
    "lastShownSlideIndex": -1,
    "lastShownStateIndex": -1,
    "nextSlide": null,
    "pauseDiagram": [Function],
    "playbackStopped": null,
    "precision": 5,
    "prevSlide": null,
    "previousPoint": null,
    "setDiagramState": [Function],
    "slides": Array [],
    "stateTimeStep": 1000,
    "states": Array [],
    "touchDown": [Function],
    "touchUp": [Function],
    "unpauseDiagram": [Function],
  },
  "renderedOnNextDraw": false,
  "scenarios": Object {},
  "setTransformCallback": null,
  "state": Object {
    "isBeingMoved": false,
    "isMovingFreely": false,
    "isPulsing": false,
    "movement": Object {
      "previousTime": -1,
      "previousTransform": Transform {
        "_type": "transform",
        "index": 3,
        "mat": Array [
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
        ],
        "name": "text",
        "order": Array [
          Scale {
            "_type": "point",
            "name": "text",
            "x": 1,
            "y": 1,
          },
          Rotation {
            "name": "text",
            "r": 0,
          },
          Translation {
            "_type": "point",
            "name": "text",
            "x": 0,
            "y": 0,
          },
        ],
      },
      "velocity": Transform {
        "_type": "transform",
        "index": 3,
        "mat": Array [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
        ],
        "name": "text",
        "order": Array [
          Scale {
            "_type": "point",
            "name": "text",
            "x": 0,
            "y": 0,
          },
          Rotation {
            "name": "text",
            "r": 0,
          },
          Translation {
            "_type": "point",
            "name": "text",
            "x": 0,
            "y": 0,
          },
        ],
      },
    },
    "pulse": Object {
      "startTime": -1,
    },
  },
  "stateProperties": Array [],
  "tieToHTML": Object {
    "element": null,
    "scale": "fit",
    "updateOnResize": true,
    "window": Rect {
      "bottom": -1,
      "height": 2,
      "left": -1,
      "right": 1,
      "top": 1,
      "width": 2,
    },
  },
  "transform": Transform {
    "_type": "transform",
    "index": 3,
    "mat": Array [
      0.45,
      0,
      1.9415,
      0,
      0.45,
      1.9572500000000002,
      0,
      0,
      1,
    ],
    "name": "text",
    "order": Array [
      Scale {
        "_type": "point",
        "name": "text",
        "x": 0.45,
        "y": 0.45,
      },
      Rotation {
        "name": "text",
        "r": 0,
      },
      Translation {
        "_type": "point",
        "name": "text",
        "x": 1.9415,
        "y": 1.9572500000000002,
      },
    ],
  },
  "type": "primitive",
  "uid": "0000000000",
  "unrenderNextDraw": false,
}
`;

exports[`Different ways to make an equation Separate All Text 1`] = `
Array [
  0.7,
  0,
  0.035,
  0,
  0.7,
  0.0996,
  0,
  0,
  1,
]
`;

exports[`Different ways to make an equation Separate All Text 2`] = `
Array [
  0.7,
  0,
  0.035,
  0,
  0.7,
  -0.084,
  0,
  0,
  1,
]
`;

exports[`Different ways to make an equation Separate All Text 3`] = `
Array [
  0.098,
  0,
  0,
  0,
  0.01,
  0.049,
  0,
  0,
  1,
]
`;

exports[`Different ways to make an equation Separate All Text 4`] = `
Array [
  0.7,
  0,
  0.098,
  0,
  0.7,
  0,
  0,
  0,
  1,
]
`;
